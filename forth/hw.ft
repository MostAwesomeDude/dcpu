\ Copyright (C) 2013 Corbin Simpson

\ Some words to help find and utilize hardware.

\ Get the hardware ID for a given hardware index.
: >hid ( u -- u u ) hwq >r >r 2drop drop r> r> ;

\ Compare two words with the two words beneath them, returning true or false
\ on match. Both pairs must match.
: 2= ( x y x y -- b ) swap >r = swap r> = and ;

\ Find the index which holds a given HID, or -1 if it's not found.
\ This is reversed from normal truthiness, since 0 can be a valid index.
: hid>? ( u u -- u ) hwn 0
    do 2dup i >hid 2= if 2drop i unloop exit then loop 2drop -1 ;

\ Find a SPED-3, or -1 if none is attached.
: sped-3? ( -- u ) 0x 42ba 0x bf3c hid>? ;

\ Allocate space for vertices.
: allot-verts ( u -- addr ) 2* dup allot here swap - ;

\ Map vertices onto a SPED-3.
\ This is tricky because we need to use X and Y.
:code map-verts ( hid u addr -- )
    1 l, Ar set,
    Xr Ir set,
    Yr Jr set,
    [Zr] Xr set,
    1 [+Zr] Yr set,
    2 [+Zr] Br set,
    3 l, Zr add,
    Br hwi,
    Jr Yr set,
    Ir Xr set,
    next;

\ Rotate the SPED-3.
:code rot-sped-3 ( hid u -- )
    2 l, Ar set,
    Xr Ir set,
    [Zr] Xr set,
    1 [+Zr] Br set,
    2 l, Zr add,
    Br hwi,
    Ir Xr set,
    next;

\ Spin the SPED-3 forever.
: spin-sped-3 ( hid -- ) 0 begin 1+ 360 mod 2dup rot-sped-3 again ;

: vert+ ( addr -- addr ) 2 + ;
: >vert ( addr xy cz -- ) >r over ! r> swap 1+ ! ;
: pack-vert ( x y z -- xy cz ) >r swap 8 lshift or r> ;
: color-vert ( cz color -- cz ) swap 0x 0700 and or ;
: red-vert ( cz -- cz ) 0x 0500 color-vert ;
: green-vert ( cz -- cz ) 0x 0600 color-vert ;
: blue-vert ( cz -- cz ) 0x 0700 color-vert ;

: pack-cube ( addr -- )
    dup 0   0   0   pack-vert red-vert >vert vert+
    dup 255 0   0   pack-vert red-vert >vert vert+
    dup 255 255 0   pack-vert red-vert >vert vert+
    dup 0   255 0   pack-vert red-vert >vert vert+
    dup 0   255 255 pack-vert red-vert >vert vert+
    dup 0   0   255 pack-vert red-vert >vert vert+
    dup 255 0   255 pack-vert red-vert >vert vert+
    dup 255 255 255 pack-vert red-vert >vert ;

: map-cube ( -- ) sped-3? 8 dup allot-verts dup pack-cube map-verts ;

\ Find a clock, or -1 if none is attached.
: clock? ( -- u) 0x 12d0 0x b402 hid>? ;

\ Get the contents of C onto the stack.
:code Cr> ( -- u ) 1 l, Zr sub, Cr [Zr] set, next;

\ Pop the stack onto A.
:code >Ar ( u -- ) [Zr] Ar set, 1 l, Zr add, next;

\ Pop the stack onto B.
:code >Br ( u -- ) [Zr] Br set, 1 l, Zr add, next;

\ Issue an HWI to a given device.
\ Caller is responsible for setting registers in advance.
:code hwi ( u -- ) [Zr] hwi, 1 l, Zr add, next;

\ Reset a clock, setting the fractional divider to whatever's on the stack.
: start-clock ( hid u -- ) >Br 0 >Ar hwi ;

\ Stop a clock.
: stop-clock ( hid -- ) 0 start-clock ; \ Cheating a bit!

\ Get the number of ticks in the clock.
: check-clock ( hid -- u ) 1 >Ar hwi Cr> ;

\ And we're done here. Thanks!
here dump-core
bye
