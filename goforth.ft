: \   1 parse 2drop ;  immediate  \ now we can use line comments
: (   41 parse 2drop ; immediate  ( and now we can use ( comments )

\ Copyright (c) 2012, Matt Hellige
\ All rights reserved.
\
\ Redistribution and use in source and binary forms, with or without
\ modification, are permitted provided that the following conditions are met:
\
\   Redistributions of source code must retain the above copyright notice,
\   this list of conditions and the following disclaimer.
\
\   Redistributions in binary form must reproduce the above copyright
\   notice, this list of conditions and the following disclaimer in the
\   documentation and/or other materials provided with the distribution.
\
\ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
\ LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
\ A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
\ HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
\ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
\ LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
\ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
\ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
\ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
\ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

: '\n'   10 ;
: bl   32 ;
: space   bl emit ;

: true   -1 ;
: false   0 ;
: not   0= ;

\ TODO should have error handling where we have 'find drop'
\ find a word in the dictionary
: '  ( "word" -- xt )  parse-word find drop ;
\ same thing, immediate version
: [']  ( "word" -- ) ( -- xt )  [ ' lit dup , , ] , ' , ; immediate

\ i provide compile and [compile] rather than postpone. i find the extra
\ 'intelligence' of postpone confusing and irritating.
\ compile an immediate word into the *current* word
: [compile]   ' , ; immediate
\ compile a non-immediate word *into the word being defined*
: compile   [compile] ['] ['] , , ; immediate

\ compile a literal from the stack
: literal   compile lit , ; immediate

\ here's an example of compile and [compile], this produces the same
\ definition of ; as we have in forth.asm.
\ : my;  compile exit latest @ hidden [compile] [ ; immediate
\ : test 65 emit my;
\ test test test

\ this implementation of does> can only be used within a : definition, as
\ in ans, and unlike as in, for example, gforth.
: setdoes   latest @ >cfa ! ;
: does>
  compile lit here 0 ,
  compile setdoes
  compile exit
  here swap !
  create-does ]
  ; immediate

: recurse   latest @ >cfa , ; immediate

\ here's an example of recurse:
\ : fac ( n -- n) dup 1 > if dup 1 - recurse * then ;


\ if-then-else
: if   compile 0branch here 0 , ; immediate
: then   dup here swap - swap ! ; immediate
: else   compile branch here 0 , swap dup here swap - swap ! ; immediate

\ unless is just bizarro if
: unless   compile not [compile] if ; immediate

\ begin LOOP COND until (until non-zero)
: begin   here ; immediate
: until   compile 0branch here - , ; immediate

\ begin LOOP again (infinite loop)
: again   compile branch here - , ; immediate

\ begin COND while LOOP repeat
: while   compile 0branch here 0 , ; immediate
: repeat   compile branch swap here - , dup here swap - swap ! ; immediate


\ char grabs first char of next word, but it needs to be state-smart...
: char   parse-word drop @
         state @ if [compile] literal then ; immediate


\ stack manipulators
: nip  ( x y -- y )  swap drop ;
: tuck  ( x y -- y x y )  swap over ;
: pick  ( x_u ... x_1 x_0 u -- x_u ... x_1 x_0 x_u )  1+ dsp@ + @ ;


\ standard base-changing words
: decimal  ( -- )  10 base ! ;
: hex  ( -- )  16 base ! ;


\ printing...

\ TODO 0>
: spaces  ( n -- )  begin dup 0 > while space 1- repeat drop ;

: u.  ( u -- )
    base @ /mod
    ?dup if recurse then
    dup 10 u< if char 0 else 10 - char a then + emit ;

\ number of digits in an unsigned number in the current base
: uwidth  ( u -- width )  base @ / ?dup if recurse 1+ else 1 then ;
\ print unsigned with minimum width (space-padded)
: u.r  ( u width -- ) swap dup uwidth rot swap - spaces u. ;
\ print signed with minimum width (space-padded)
\ TODO 0<
: .r  ( n width -- ) swap dup 0 <
    if negate 1 swap rot 1- else 0 swap rot then
    swap dup uwidth rot swap -  spaces swap  if char - emit then  u. ;

: . 0 .r space ;
: .s  ( -- )
    dsp@ s0 @ swap - char < emit u. char > emit space
    dsp@ s0 @ begin 1- 2dup u<= while dup @ . repeat 2drop ;
: u. u. space ;

: ? ( addr -- ) @ . ;

\ strings
: .(   char ) parse type ; immediate

: S"   compile litstring  char " parse
       dup ,                    \ compile the count
       here                     \ save current compile location
       swap dup allot           \ advance it
       move ; immediate         \ copy the string

: ."   [compile] S"  compile type ; immediate


\ abort is just a stack-clearing quit, but since we haven't defined
\ quit yet, we need to indirect through a variable (or defer, once we have it.)
variable quitword
: abort   s0 @ dsp!  quitword @ execute ;
\ abort" is similar, but prints a message and only fires if n is non-zero
: doabrt  ( n a u -- ) rot if cr ." ABORT: " type abort else 2drop then ;
: abort"  ( n -- )  [compile] S" compile doabrt ; immediate


\ finally, the traditional repl that checks after each line for stack underflow.
\ surprisingly, because of the memory layout, this simple check is enough to
\ catch a lot of problems before the heap is actually damaged.
: quit   cr  r0 @ rsp!
    begin
      224 conattr ! cr refill 320 conattr !
      0= if abort" failed to refill input buffer" then
      64 conattr ! interpret 320 conattr !
      0= if abort" no such word" then
      dsp@ s0 @ u> if abort" stack underflow" then
      space ." ok " cr
    again ;
\ and set the variable to tie the knot with abort
' quit quitword !

\ the real boot word
: boot  ( never returns ) space
    64 conattr ! ." this is " 
    320 conattr ! ." goforth"
    64 conattr ! ." . enjoy."
    quit ;
' boot boot-word !

\ save the whole dictionary as a bootable image
here dump-core
bye
