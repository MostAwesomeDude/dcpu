: \   1 parse 2drop ;  immediate  \ now we can use line comments
: (   41 parse 2drop ; immediate  ( and now we can use ( comments )

: '\n'   10 ;
: bl   32 ;

: space   bl emit ;

: true   -1 ;
: false   0 ;
: not   0= ;

\ TODO should have error handling where we have 'find drop'
\ find a word in the dictionary
: '  ( "word" -- xt )  parse-word find drop ;
\ same thing, immediate version
: [']  ( "word" -- ) ( -- xt )  [ ' lit dup , , ] , ' , ; immediate

\ i provide compile and [compile] rather than postpone. i find the extra
\ 'intelligence' of postpone confusing and irritating.
\ compile an immediate word into the *current* word
: [compile]   ' , ; immediate
\ compile a non-immediate word *into the word being defined*
: compile   [compile] ['] ['] , , ; immediate

\ compile a literal from the stack
: literal   compile lit , ; immediate

\ here's an example of compile and [compile], this produces the same
\ definition of ; as we have in forth.asm.
\ : my;  compile exit latest @ hidden [compile] [ ; immediate
\ : test 65 emit my;
\ test test test

: recurse   latest @ >cfa , ; immediate

\ if-then-else
: if   compile 0branch here 0 , ; immediate
: then   dup here swap - swap ! ; immediate
: else   compile branch here 0 , swap dup here swap - swap ! ; immediate

\ unless is just bizarro if
: unless   compile not [compile] if ; immediate

\ begin LOOP COND until (until non-zero)
: begin   here ; immediate
: until   compile 0branch here - , ; immediate

\ begin LOOP again (infinite loop)
: again   compile branch here - , ; immediate

\ begin COND while LOOP repeat
: while   compile 0branch here 0 , ; immediate
: repeat   compile branch swap here - , dup here swap - swap ! ; immediate

\ char grabs first char of next word, but it needs to be state-smart...
: char   parse-word drop @
         state @ if [compile] literal then ; immediate

\ standard base-changing words
: decimal  ( -- )  10 base ! ;
: hex  ( -- )  16 base ! ;

\ printing...
: u.  ( u -- )
    base @ /mod
    ?dup if recurse then
    dup 10 < if char 0 else 10 - char a then + emit ;

: .s  ( -- )
    dsp@ s0 @ swap - char < emit u. char > emit space
    dsp@ s0 @ begin 1- 2dup swap >= while dup @ u. space repeat 2drop ;

\ abort is just a stack-clearing quit
: abort   s0 @ dsp! quit ;



\ the real boot word
: boot char ! emit cr quit ;
' boot boot-word !

\ save the whole dictionary as a bootable image
here dump-core
0 bye
